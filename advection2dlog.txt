######################################
# Finch Log for: advection2d
######################################
(verbosity = 3)
1.	Set time stepper to Euler-explicit
2.	Building simple quad mesh with nx*nx elements, nx=[300, 300]
3.	Building full grid from mesh data. Types = FV
4.	Building reference element: 2D, order=1, nfaces=4
5.	Initial node setup: 1.5707330703735352
6.	Remove duplicate nodes: 5.8880109786987305
7.	Vertex, face, bdry setup: 4.957787990570068
8.	Remove duplicate bdry nodes: 0.1392688751220703
9.	Total grid building time: 24.19472098350525
10.	Added mesh with 90601 vertices and 90000 elements.
11.	Full grid has 90601 nodes.
12.	Added boundary ID: 2 including [301, 0] nodes, [300, 0] faces.
13.	Added boundary ID: 3 including [299, 0, 0] nodes, [300, 0, 0] faces.
14.	Added boundary ID: 4 including [299, 0, 0, 0] nodes, [300, 0, 0, 0] faces.
15.	Added variable: u of type: scalar, location: cell
16.	Added callback function: bc_f
17.	Generated function: genfunction_1
18.	Boundary condition: var=u bid=1 type=flux val=genfunction_1
19.	Boundary condition: var=u bid=2 type=No BC val=0.0
20.	Boundary condition: var=u bid=3 type=No BC val=0.0
21.	Boundary condition: var=u bid=4 type=No BC val=0.0
22.	Set time stepper values to dt=0.013000000000000001, Nsteps=100
23.	Generated function: genfunction_2
24.	Initial condition for u : Union{Float64, GenFunction}[GenFunction("genfunction_2", "x::Union{Float64,Float64},y::Union{Float64,Float64},z::Union{Float64,Float64},t::Union{Float64,Float64},node_index::Int,face_index::Int,indices::Vector{Int}", "0", 0, Main.Finch.genfunction_2)]
25.	Generated function: genfunction_3
26.	Generated function: genfunction_4
27.	Added coefficient a : ["0.1*cos(pi*x/2/0.1)", "0.3*sin(pi*x/2/0.1)"]
28.	Generated function: genfunction_5
29.	Added coefficient s : ["0.1 * sin(pi*x)^4 * sin(pi*y)^4"]
30.	Making conservation form for variable(s): Any[:u]
31.	Conservation form, input: ["s + surface(upwind(a,u))"]
32.	SP expr = Any[:(s + surface(upwind(a, u)))]
33.	SP insert parameters -> Any[:(s + surface(upwind(a, u)))]
34.	SP replace symbols -> Any[:(SymEngine.Basic[_s_1] + (finch_state.ops[5]).op((finch_state.ops[28]).op(SymEngine.Basic[_a_1, _a_2], SymEngine.Basic[_u_1])))]
35.	SP handle callbacks -> Any[:(SymEngine.Basic[_s_1] + (finch_state.ops[5]).op((finch_state.ops[28]).op(SymEngine.Basic[_a_1, _a_2], SymEngine.Basic[_u_1])))]
36.	SP apply ops -> Any[SymEngine.Basic[_s_1 + conditional(isgreaterthan(_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2, 0), (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL1__u_1, (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL2__u_1)*SURFACEINTEGRAL]]
37.	expanded: _s_1 + conditional(isgreaterthan(_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2, 0), (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL1__u_1, (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL2__u_1)*SURFACEINTEGRAL
38.	Basic->Expr: _s_1 + conditional(isgreaterthan(_a_1 * _FACENORMAL1_1 + _a_2 * _FACENORMAL1_2, 0), (_a_1 * _FACENORMAL1_1 + _a_2 * _FACENORMAL1_2) * CELL1__u_1, (_a_1 * _FACENORMAL1_1 + _a_2 * _FACENORMAL1_2) * CELL2__u_1) * SURFACEINTEGRAL
39.	SP sterms = Vector{Vector{SymEngine.Basic}}[[[_s_1, conditional(isgreaterthan(_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2, 0), (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL1__u_1, (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL2__u_1)*SURFACEINTEGRAL]]]
40.	SP LHS = Vector{Vector{SymEngine.Basic}}[[[]]]
41.	SP RHS = Vector{Vector{SymEngine.Basic}}[[[-_s_1]]]
42.	SP surfLHS = Vector{Vector{SymEngine.Basic}}[[[conditional(isgreaterthan(_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2, 0), (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL1__u_1, (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL2__u_1)]]]
43.	SP surfRHS = Vector{Vector{SymEngine.Basic}}[[[]]]
44.	SP NONLINEAR = Vector{Vector{SymEngine.Basic}}[[[]]]
45.	Linearized: Vector{Vector{SymEngine.Basic}}[[[]]] + surface(Vector{Vector{SymEngine.Basic}}[[[conditional(isgreaterthan(_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2, 0), (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL1__u_1, (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL2__u_1)]]]) = Vector{Vector{SymEngine.Basic}}[[[-_s_1]]] + surface(Vector{Vector{SymEngine.Basic}}[[[]]])
46.	flux, before modifying for time: Vector{Vector{SymEngine.Basic}}[[[conditional(isgreaterthan(_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2, 0), (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL1__u_1, (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL2__u_1)]]] - Vector{Vector{SymEngine.Basic}}[[[]]]
47.	flux, modified for time stepping: Vector{Vector{SymEngine.Basic}}[[[]]] + Vector{Vector{SymEngine.Basic}}[[[-conditional(isgreaterthan(_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2, 0), (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL1__u_1, (_a_1*_FACENORMAL1_1 + _a_2*_FACENORMAL1_2)*CELL2__u_1)]]]
48.	source, before modifying for time: Vector{Vector{SymEngine.Basic}}[[[]]] - Vector{Vector{SymEngine.Basic}}[[[-_s_1]]]
49.	source, modified for time stepping: Vector{Vector{SymEngine.Basic}}[[[]]] + Vector{Vector{SymEngine.Basic}}[[[_s_1]]]
50.	lhs symexpression:
	Any[Any[Any[]]]
51.	rhs symexpression:
	Any[Any[Any[SymExpression(s_1, Any[s_1])]]]
52.	lhs surface symexpression:
	Any[Any[Any[]]]
53.	rhs surface symexpression:
	Any[Any[Any[SymExpression(:(-(conditional_function(a_1 * FACENORMAL1_1 + a_2 * FACENORMAL1_2 > 0, (a_1 * FACENORMAL1_1 + a_2 * FACENORMAL1_2) * CELL1u_1, (a_1 * FACENORMAL1_1 + a_2 * FACENORMAL1_2) * CELL2u_1))), Any[a_1, FACENORMAL1_1, a_2, FACENORMAL1_2, a_1, FACENORMAL1_1, a_2, FACENORMAL1_2, CELL1u_1, a_1, FACENORMAL1_1, a_2, FACENORMAL1_2, CELL2u_1])]]]
54.	Latex equation:
		Latex equation:
		$ \int_{K}\left[\left[\right]\right] dx + \int_{\partial K}\left[\left[\right]\right] ds = \int_{K}\left[\left[s_{1}\right]\right] dx + \int_{\partial K}\left[\left[-\left(conditional\left(>\left(\left(a_{1} * normal_{1}\right) + \left(a_{2} * normal_{2}\right), 0\right), \left(\left(a_{1} * normal_{1}\right) + \left(a_{2} * normal_{2}\right)\right) * u_{1+}, \left(\left(a_{1} * normal_{1}\right) + \left(a_{2} * normal_{2}\right)\right) * u_{1-}\right)\right)\right]\right] ds
55.	Conservation form IR: block:
├─ TIMER
│  ├─ allocate
│  └─ block:allocation
│     ├─ (comment)Allocate global vectors.
│     ├─ =
│     │  ├─ global_vector
│     │  └─ Allocate{CustomFloat}
│     │     └─ fv_dofs_partition
│     ├─ =
│     │  ├─ global_solution
│     │  └─ Allocate{CustomFloat}
│     │     └─ fv_dofs_global
│     ├─ =
│     │  ├─ solution
│     │  └─ Allocate{CustomFloat}
│     │     └─ fv_dofs_partition
│     ├─ (comment)Allocate elemental source and flux.
│     ├─ =
│     │  ├─ source
│     │  └─ Allocate{CustomFloat}
│     │     └─ dofs_per_loop
│     ├─ =
│     │  ├─ flux
│     │  └─ Allocate{CustomFloat}
│     │     └─ dofs_per_loop
│     ├─ =
│     │  ├─ flux_tmp
│     │  └─ Allocate{CustomFloat}
│     │     └─ dofs_per_loop
│     ├─ (comment)Boundary done flag for each face.
│     ├─ =
│     │  ├─ bdry_done
│     │  └─ Allocate{CustomInt}
│     │     └─ num_faces
│     ├─ (comment)Flux done flag for each face so that it is not done twice.
│     ├─ =
│     │  ├─ face_flux_done
│     │  └─ Allocate{Bool}
│     │     └─ num_faces
│     ├─ (comment)No indexed variables
│     └─ =
│        ├─ index_values
│        └─ Allocate{CustomInt}
│           └─ 0
└─ block:
   ├─ (comment)No parent-child mesh needed
   ├─ if
   │  ├─ >
   │  │  ├─ num_partitions
   │  │  └─ 1
   │  ├─ block:
   │  │  └─ GHOST_EXCHANGE_FV
   │  │     └─ 0
   │  └─ nothing
   ├─ GATHER_VARS
   │  └─ solution
   ├─ =
   │  ├─ t
   │  └─ 0.0
   ├─ =
   │  ├─ dt
   │  └─ time_stepper
   │     └─ dt
   ├─ (comment)###############################################
   ├─ (comment)Time stepping loop
   └─ TIMER
      ├─ time_steps
      └─ block:
         ├─ block:
         │  ├─ =
         │  │  ├─ last_minor_progress
         │  │  └─ 0
         │  ├─ =
         │  │  ├─ last_major_progress
         │  │  └─ 0
         │  └─ if
         │     ├─ ==
         │     │  ├─ proc_rank
         │     │  └─ 0
         │     ├─ block:
         │     │  └─ PRINT_STRING
         │     │     └─ "Time step progress(%) 0"
         │     └─ nothing
         └─ Loop{ti=1, time_stepper.Nsteps}
            └─ block:
               ├─ FILL_ARRAY
               │  ├─ bdry_done
               │  ├─ 0
               │  └─ num_faces
               ├─ FILL_ARRAY
               │  ├─ face_flux_done
               │  ├─ false
               │  └─ num_faces
               ├─ =
               │  ├─ next_nonzero_index
               │  └─ 1
               ├─ if
               │  ├─ >
               │  │  ├─ num_partitions
               │  │  └─ 1
               │  ├─ block:
               │  │  └─ GHOST_EXCHANGE_FV
               │  └─ nothing
               ├─ (comment)No pre-step function specified
               ├─ TIMER
               │  ├─ step_assembly
               │  └─ block:assembly loop
               │     └─ Loop{ei=1, num_elements}
               │        └─ block:assembly
               │           ├─ =
               │           │  ├─ eid
               │           │  └─ mesh
               │           │     └─ elemental_order
               │           │        └─ ei
               │           ├─ =
               │           │  ├─ index_offset
               │           │  └─ 0
               │           ├─ (comment)Begin assembly code
               │           ├─ =
               │           │  ├─ source
               │           │  │  └─ 1
               │           │  └─ 0.0
               │           ├─ =
               │           │  ├─ flux
               │           │  │  └─ 1
               │           │  └─ 0.0
               │           ├─ block:volume integral
               │           │  ├─ block:volume coefficients
               │           │  │  ├─ (comment)Evaluate volume coefficients.
               │           │  │  ├─ =
               │           │  │  │  ├─ x
               │           │  │  │  └─ fv_info
               │           │  │  │     └─ cellCenters
               │           │  │  │        ├─ 1
               │           │  │  │        └─ eid
               │           │  │  ├─ =
               │           │  │  │  ├─ y
               │           │  │  │  └─ fv_info
               │           │  │  │     └─ cellCenters
               │           │  │  │        ├─ 2
               │           │  │  │        └─ eid
               │           │  │  ├─ =
               │           │  │  │  ├─ z
               │           │  │  │  └─ 0.0
               │           │  │  ├─ =
               │           │  │  │  ├─ value__s_1
               │           │  │  │  └─ COEF_EVAL
               │           │  │  │     ├─ 2
               │           │  │  │     ├─ 1
               │           │  │  │     ├─ x
               │           │  │  │     ├─ y
               │           │  │  │     ├─ z
               │           │  │  │     ├─ t
               │           │  │  │     ├─ eid
               │           │  │  │     ├─ 0
               │           │  │  │     └─ index_values
               │           │  │  └─ =
               │           │  │     ├─ volume
               │           │  │     └─ geometric_factors
               │           │  │        └─ volume
               │           │  │           └─ eid
               │           │  ├─ (comment)Compute source terms (volume integral)
               │           │  └─ block:
               │           │     └─ =
               │           │        ├─ source
               │           │        │  └─ 1
               │           │        └─ value__s_1
               │           ├─ block:surface integral
               │           │  ├─ (comment)Compute flux terms (surface integral) in a face loop
               │           │  └─ Loop{fi=1, faces_per_element}
               │           │     └─ block:
               │           │        ├─ =
               │           │        │  ├─ flux_tmp
               │           │        │  │  └─ 1
               │           │        │  └─ 0.0
               │           │        ├─ (comment)
               │           │        ├─ =
               │           │        │  ├─ fid
               │           │        │  └─ mesh
               │           │        │     └─ element2face
               │           │        │        ├─ fi
               │           │        │        └─ eid
               │           │        ├─ =
               │           │        │  ├─ fbid
               │           │        │  └─ mesh
               │           │        │     └─ facebid
               │           │        │        └─ fid
               │           │        ├─ =
               │           │        │  ├─ left_el
               │           │        │  └─ mesh
               │           │        │     └─ face2element
               │           │        │        ├─ 1
               │           │        │        └─ fid
               │           │        ├─ =
               │           │        │  ├─ right_el
               │           │        │  └─ mesh
               │           │        │     └─ face2element
               │           │        │        ├─ 2
               │           │        │        └─ fid
               │           │        ├─ =
               │           │        │  ├─ neighbor
               │           │        │  └─ left_el
               │           │        ├─ =
               │           │        │  ├─ out_side
               │           │        │  └─ 1
               │           │        ├─ if
               │           │        │  ├─ &&
               │           │        │  │  ├─ ==
               │           │        │  │  │  ├─ eid
               │           │        │  │  │  └─ left_el
               │           │        │  │  └─ >
               │           │        │  │     ├─ right_el
               │           │        │  │     └─ 0
               │           │        │  ├─ block:
               │           │        │  │  ├─ =
               │           │        │  │  │  ├─ neighbor
               │           │        │  │  │  └─ right_el
               │           │        │  │  └─ =
               │           │        │  │     ├─ out_side
               │           │        │  │     └─ 2
               │           │        │  └─ nothing
               │           │        ├─ block:surface coefficients
               │           │        │  ├─ (comment)Evaluate surface coefficients.
               │           │        │  ├─ if/else
               │           │        │  │  ├─ ==
               │           │        │  │  │  ├─ eid
               │           │        │  │  │  └─ left_el
               │           │        │  │  ├─ block:
               │           │        │  │  │  ├─ =
               │           │        │  │  │  │  ├─ normal_sign
               │           │        │  │  │  │  └─ 1
               │           │        │  │  │  └─ =
               │           │        │  │  │     ├─ in_side
               │           │        │  │  │     └─ 1
               │           │        │  │  └─ block:
               │           │        │  │     ├─ =
               │           │        │  │     │  ├─ normal_sign
               │           │        │  │     │  └─ -1
               │           │        │  │     └─ =
               │           │        │  │        ├─ in_side
               │           │        │  │        └─ 2
               │           │        │  ├─ =
               │           │        │  │  ├─ FACENORMAL1_1
               │           │        │  │  └─ *
               │           │        │  │     ├─ normal_sign
               │           │        │  │     └─ mesh
               │           │        │  │        └─ facenormals
               │           │        │  │           ├─ 1
               │           │        │  │           └─ fid
               │           │        │  ├─ =
               │           │        │  │  ├─ FACENORMAL2_1
               │           │        │  │  └─ -
               │           │        │  │     └─ FACENORMAL1_1
               │           │        │  ├─ =
               │           │        │  │  ├─ FACENORMAL1_2
               │           │        │  │  └─ *
               │           │        │  │     ├─ normal_sign
               │           │        │  │     └─ mesh
               │           │        │  │        └─ facenormals
               │           │        │  │           ├─ 2
               │           │        │  │           └─ fid
               │           │        │  ├─ =
               │           │        │  │  ├─ FACENORMAL2_2
               │           │        │  │  └─ -
               │           │        │  │     └─ FACENORMAL1_2
               │           │        │  ├─ =
               │           │        │  │  ├─ x
               │           │        │  │  └─ fv_info
               │           │        │  │     └─ faceCenters
               │           │        │  │        ├─ 1
               │           │        │  │        └─ fid
               │           │        │  ├─ =
               │           │        │  │  ├─ y
               │           │        │  │  └─ fv_info
               │           │        │  │     └─ faceCenters
               │           │        │  │        ├─ 2
               │           │        │  │        └─ fid
               │           │        │  ├─ =
               │           │        │  │  ├─ z
               │           │        │  │  └─ 0.0
               │           │        │  ├─ =
               │           │        │  │  ├─ value__a_1
               │           │        │  │  └─ COEF_EVAL
               │           │        │  │     ├─ 1
               │           │        │  │     ├─ 1
               │           │        │  │     ├─ x
               │           │        │  │     ├─ y
               │           │        │  │     ├─ z
               │           │        │  │     ├─ t
               │           │        │  │     ├─ eid
               │           │        │  │     ├─ fid
               │           │        │  │     └─ index_values
               │           │        │  ├─ =
               │           │        │  │  ├─ value__a_2
               │           │        │  │  └─ COEF_EVAL
               │           │        │  │     ├─ 1
               │           │        │  │     ├─ 2
               │           │        │  │     ├─ x
               │           │        │  │     ├─ y
               │           │        │  │     ├─ z
               │           │        │  │     ├─ t
               │           │        │  │     ├─ eid
               │           │        │  │     ├─ fid
               │           │        │  │     └─ index_values
               │           │        │  ├─ =
               │           │        │  │  ├─ value_CELL1_u_1
               │           │        │  │  └─ KNOWN_VAR
               │           │        │  │     ├─ 1
               │           │        │  │     ├─ 1
               │           │        │  │     └─ eid
               │           │        │  ├─ =
               │           │        │  │  ├─ value_CELL2_u_1
               │           │        │  │  └─ KNOWN_VAR
               │           │        │  │     ├─ 1
               │           │        │  │     ├─ 1
               │           │        │  │     └─ neighbor
               │           │        │  ├─ =
               │           │        │  │  ├─ area
               │           │        │  │  └─ geometric_factors
               │           │        │  │     └─ area
               │           │        │  │        └─ fid
               │           │        │  └─ =
               │           │        │     ├─ area_over_volume
               │           │        │     └─ /
               │           │        │        ├─ area
               │           │        │        └─ volume
               │           │        ├─ (comment)Compute flux terms (surface integral)
               │           │        ├─ block:
               │           │        │  └─ =
               │           │        │     ├─ flux_tmp
               │           │        │     │  └─ 1
               │           │        │     └─ -
               │           │        │        └─ conditional_function
               │           │        │           ├─ >
               │           │        │           │  ├─ +
               │           │        │           │  │  ├─ *
               │           │        │           │  │  │  ├─ value__a_1
               │           │        │           │  │  │  └─ FACENORMAL1_1
               │           │        │           │  │  └─ *
               │           │        │           │  │     ├─ value__a_2
               │           │        │           │  │     └─ FACENORMAL1_2
               │           │        │           │  └─ 0
               │           │        │           ├─ *
               │           │        │           │  ├─ +
               │           │        │           │  │  ├─ *
               │           │        │           │  │  │  ├─ value__a_1
               │           │        │           │  │  │  └─ FACENORMAL1_1
               │           │        │           │  │  └─ *
               │           │        │           │  │     ├─ value__a_2
               │           │        │           │  │     └─ FACENORMAL1_2
               │           │        │           │  └─ value_CELL1_u_1
               │           │        │           └─ *
               │           │        │              ├─ +
               │           │        │              │  ├─ *
               │           │        │              │  │  ├─ value__a_1
               │           │        │              │  │  └─ FACENORMAL1_1
               │           │        │              │  └─ *
               │           │        │              │     ├─ value__a_2
               │           │        │              │     └─ FACENORMAL1_2
               │           │        │              └─ value_CELL2_u_1
               │           │        ├─ block:boundary conditions
               │           │        │  ├─ (comment)Apply boundary conditions
               │           │        │  └─ if
               │           │        │     ├─ >
               │           │        │     │  ├─ fbid
               │           │        │     │  └─ 0
               │           │        │     ├─ block:
               │           │        │     │  └─ apply_boundary_conditions_face_rhs
               │           │        │     │     ├─ var
               │           │        │     │     ├─ eid
               │           │        │     │     ├─ fid
               │           │        │     │     ├─ fbid
               │           │        │     │     ├─ mesh
               │           │        │     │     ├─ refel
               │           │        │     │     ├─ geometric_factors
               │           │        │     │     ├─ fv_info
               │           │        │     │     ├─ prob
               │           │        │     │     ├─ t
               │           │        │     │     ├─ dt
               │           │        │     │     ├─ flux_tmp
               │           │        │     │     ├─ bdry_done
               │           │        │     │     ├─ index_offset
               │           │        │     │     └─ index_values
               │           │        │     └─ nothing
               │           │        └─ =
               │           │           ├─ flux
               │           │           │  └─ 1
               │           │           └─ +
               │           │              ├─ flux
               │           │              │  └─ 1
               │           │              └─ *
               │           │                 ├─ flux_tmp
               │           │                 │  └─ 1
               │           │                 └─ area_over_volume
               │           └─ block:local to global
               │              ├─ (comment)Place elemental parts in global system.
               │              └─ block:
               │                 └─ =
               │                    ├─ global_vector
               │                    │  └─ eid
               │                    └─ +
               │                       ├─ source
               │                       │  └─ 1
               │                       └─ flux
               │                          └─ 1
               ├─ TIMER
               │  ├─ update_sol
               │  └─ Loop{update_i=1, fv_dofs_partition}
               │     └─ block:
               │        └─ =
               │           ├─ solution
               │           │  └─ update_i
               │           └─ +
               │              ├─ solution
               │              │  └─ update_i
               │              └─ *
               │                 ├─ dt
               │                 └─ global_vector
               │                    └─ update_i
               ├─ BDRY_TO_VECTOR
               │  └─ solution
               ├─ SCATTER_VARS
               │  └─ solution
               ├─ (comment)No post-step function specified
               ├─ =
               │  ├─ t
               │  └─ +
               │     ├─ t
               │     └─ dt
               └─ block:
                  └─ if/else
                     ├─ >=
                     │  ├─ *
                     │  │  ├─ 100.0
                     │  │  └─ /
                     │  │     ├─ ti
                     │  │     └─ time_stepper
                     │  │        └─ Nsteps
                     │  └─ +
                     │     ├─ last_major_progress
                     │     └─ 10
                     ├─ block:
                     │  ├─ =
                     │  │  ├─ last_major_progress
                     │  │  └─ +
                     │  │     ├─ last_major_progress
                     │  │     └─ 10
                     │  ├─ =
                     │  │  ├─ last_minor_progress
                     │  │  └─ +
                     │  │     ├─ last_minor_progress
                     │  │     └─ 2
                     │  └─ if
                     │     ├─ ==
                     │     │  ├─ proc_rank
                     │     │  └─ 0
                     │     ├─ block:
                     │     │  └─ PRINT_STRING
                     │     │     └─ last_major_progress
                     │     └─ nothing
                     └─ block:
                        └─ if
                           ├─ >=
                           │  ├─ *
                           │  │  ├─ 100.0
                           │  │  └─ /
                           │  │     ├─ ti
                           │  │     └─ time_stepper
                           │  │        └─ Nsteps
                           │  └─ +
                           │     ├─ last_minor_progress
                           │     └─ 2
                           ├─ block:
                           │  ├─ =
                           │  │  ├─ last_minor_progress
                           │  │  └─ +
                           │  │     ├─ last_minor_progress
                           │  │     └─ 2
                           │  └─ if
                           │     ├─ ==
                           │     │  ├─ proc_rank
                           │     │  └─ 0
                           │     ├─ block:
                           │     │  └─ PRINT_STRING
                           │     │     └─ "."
                           │     └─ nothing
                           └─ nothing

56.	Code layer: 
function generated_solve_function_for_u(var::Vector{Variable{FT}}, mesh::Grid, refel::Refel, geometric_factors::GeometricFactors, fv_info::FVInfo, config::FinchConfig, coefficients::Vector{Coefficient}, variables::Vector{Variable{FT}}, test_functions::Vector{Coefficient}, ordered_indexers::Vector{Indexer}, prob::FinchProblem, time_stepper::Stepper, buffers::ParallelBuffers, timer_output::TimerOutput, nl_var=nothing) where FT<:AbstractFloat
    
    # User specified data types for int and float
    # int type is Int64
    # float type is Float64
    
    # pre/post step functions if defined
    pre_step_function = prob.pre_step_function;
    post_step_function = prob.post_step_function;
    
    
    
    # Prepare some useful numbers
    # dofs_per_node = 1;
    # dofs_per_loop = 1;
    # dof_offsets = [0];
    
    varcount = length(var);
    dofs_per_node = var[1].total_components;
    dofs_per_loop = length(var[1].symvar);
    dof_offsets = zeros(Int, varcount);
    for i=2:varcount
        dof_offsets[i] = dofs_per_node;
        dofs_per_node += var[i].total_components;
        dofs_per_loop += length(var[i].symvar);
    end

    
    nnodes_partition = size(mesh.allnodes,2);
    nnodes_global = nnodes_partition;
    num_elements = mesh.nel_owned;
    num_elements_global = mesh.nel_global;
    num_elements_ghost = mesh.nel_ghost;
    num_faces = mesh.nface_owned + mesh.nface_ghost;
    
    dofs_global = dofs_per_node * nnodes_global;
    fv_dofs_global = dofs_per_node * num_elements_global;
    dofs_partition = dofs_per_node * nnodes_partition;
    fv_dofs_partition = dofs_per_node * (num_elements + num_elements_ghost);
    num_partitions = config.num_partitions;
    proc_rank = config.proc_rank;
    
    nodes_per_element = refel.Np;
    qnodes_per_element = refel.Nqp;
    faces_per_element = refel.Nfaces;
    nodes_per_face = refel.Nfp[1];
    dofs_per_element = dofs_per_node * nodes_per_element;
    local_system_size = dofs_per_loop * nodes_per_element;
    
    num_bdry_faces = 0;
    nbids = length(mesh.bids);
    for bi=1:nbids
        num_bdry_faces += length(mesh.bdryface[bi]);
    end

    
    
    # FVM specific pieces
    dofs_global = fv_dofs_global;
    # boundary values for flux on each boundary face
    boundary_flux = zeros(Float64, num_bdry_faces * dofs_per_node);
    boundary_dof_index = zeros(Int64, num_bdry_faces * dofs_per_node);
    
    @timeit timer_output "allocate" begin
        #= Allocate global vectors. =#
        global_vector::Vector{Float64} = zeros(Float64, fv_dofs_partition)
        global_solution::Vector{Float64} = zeros(Float64, fv_dofs_global)
        solution::Vector{Float64} = zeros(Float64, fv_dofs_partition)
        #= Allocate elemental source and flux. =#
        source::Vector{Float64} = zeros(Float64, dofs_per_loop)
        flux::Vector{Float64} = zeros(Float64, dofs_per_loop)
        flux_tmp::Vector{Float64} = zeros(Float64, dofs_per_loop)
        #= Boundary done flag for each face. =#
        bdry_done::Vector{Int64} = zeros(Int64, num_faces)
        #= Flux done flag for each face so that it is not done twice. =#
        face_flux_done::Vector{Bool} = zeros(Bool, num_faces)
        #= No indexed variables =#
        index_values::Vector{Int64} = zeros(Int64, 0)
        
    end # timer:allocate

    @timeit timer_output "GPU alloc" begin
        # Allocate and transfer things to the GPU
        mesh_elemental_order_gpu = CuArray(mesh.elemental_order);
        fv_info_cellCenters_gpu = CuArray(fv_info.cellCenters);
        coefficients_2_value_gpu = CuArray([0.0]);
        geometric_factors_volume_gpu = CuArray(geometric_factors.volume);
        mesh_element2face_gpu = CuArray(mesh.element2face);
        mesh_facebid_gpu = CuArray(mesh.facebid);
        mesh_face2element_gpu = CuArray(mesh.face2element);
        mesh_facenormals_gpu = CuArray(mesh.facenormals);
        fv_info_faceCenters_gpu = CuArray(fv_info.faceCenters);
        coefficients_1_value_gpu = CuArray([0.0, 0.0]);
        variables_1_values_gpu = CuArray(variables[1].values);
        geometric_factors_area_gpu = CuArray(geometric_factors.area);
        global_vector_gpu = CuArray(global_vector);
        
        index_ranges = CuArray(tmp_index_ranges);
    end

    #= No parent-child mesh needed =#
    if (num_partitions > 1)
        exchange_ghosts_fv(var, mesh, dofs_per_node, 0, config);
    end

    solution = get_var_vals(var, solution, );
    t = 0.0
    dt = time_stepper.dt
    #= ############################################### =#
    #= Time stepping loop =#
    @timeit timer_output "time_steps" begin
        last_minor_progress = 0
        last_major_progress = 0
        if (proc_rank == 0)
            print("Time step progress(%) 0")
        end

        for ti = 1:time_stepper.Nsteps
            bdry_done .= 0
            face_flux_done .= false
            next_nonzero_index = 1
            if (num_partitions > 1)
                exchange_ghosts_fv(var, mesh, dofs_per_node, ti, config);
            end

            #= No pre-step function specified =#
            @timeit timer_output "step_assembly" begin
                
                
                # Send needed values back to gpu
                copyto!(variables_1_values_gpu, variables[1].values);
                CUDA.synchronize();
                
                
                # This is done on gpu
                @cuda threads=256 blocks=min(4096,ceil(Int, dofs_global/256)) gpu_assembly_kernel(mesh_elemental_order_gpu, fv_info_cellCenters_gpu, coefficients_2_value_gpu, geometric_factors_volume_gpu, mesh_element2face_gpu, 
                            mesh_facebid_gpu, mesh_face2element_gpu, mesh_facenormals_gpu, fv_info_faceCenters_gpu, coefficients_1_value_gpu, 
                            variables_1_values_gpu, geometric_factors_area_gpu, global_vector_gpu, dofs_global, faces_per_element, 
                            index_ranges)
                
                
                # Asynchronously compute boundary values on cpu
                @timeit timer_output "bdry_vals" begin
                    next_bdry_index = 1;
                    for bi=1:nbids
                        nfaces = length(mesh.bdryface[bi]);
                        for fi=1:nfaces
                            fid = mesh.bdryface[bi][fi];
                            eid = mesh.face2element[1,fid];
                            fbid = mesh.bids[bi];
                            volume = geometric_factors.volume[eid]
                            area = geometric_factors.area[fid]
                            area_over_volume = (area / volume)
                            
                            
                            
                            index_offset = 0
                            
                            row_index = index_offset + 1 + dofs_per_node * (eid - 1);
                            
                            apply_boundary_conditions_face_rhs(var, eid, fid, fbid, mesh, refel, geometric_factors, fv_info, prob, 
                                                                t, dt, flux_tmp, bdry_done, index_offset, index_values)
                            #
                            # store it
                            boundary_flux[next_bdry_index] = flux_tmp[1] * area_over_volume;
                            boundary_dof_index[next_bdry_index] = row_index;
                            next_bdry_index += 1;
                            
                        end

                    end

                end # timer bdry_vals

                
                # Then get global_vector from gpu
                CUDA.synchronize()
                copyto!(global_vector, global_vector_gpu)
                CUDA.synchronize()
                
                # And add BCs to global vector
                for update_i = 1:(num_bdry_faces * dofs_per_node)
                    row_index = boundary_dof_index[update_i]
                    global_vector[row_index] = global_vector[row_index] + boundary_flux[update_i];
                end

                
                
            end # timer:step_assembly

            
            @timeit timer_output "update_sol" begin
                for update_i = 1:fv_dofs_partition
                    solution[update_i] = (solution[update_i] + (dt * global_vector[update_i]))
                end

                
            end # timer:update_sol

            
            copy_bdry_vals_to_vector(var, solution, mesh, dofs_per_node, prob);
            place_vector_in_vars(var, solution);
            #= No post-step function specified =#
            t = (t + dt)
            if ((100.0 * (ti / time_stepper.Nsteps)) >= (last_major_progress + 10))
                last_major_progress = (last_major_progress + 10)
                last_minor_progress = (last_minor_progress + 2)
                if (proc_rank == 0)
                    print(string(last_major_progress))
                end

            
            else
                if ((100.0 * (ti / time_stepper.Nsteps)) >= (last_minor_progress + 2))
                    last_minor_progress = (last_minor_progress + 2)
                    if (proc_rank == 0)
                        print(".")
                    end

                end

            end

        end

        
    end # timer:time_steps

    
    
    return nothing;
    
end # function



57.	Generated function: generated_solve_function_for_u(var::Vector{Variable{FT}}, mesh::Grid, refel::Refel, geometric_factors::GeometricFactors, fv_info::FVInfo, config::FinchConfig, coefficients::Vector{Coefficient}, variables::Vector{Variable{FT}}, test_functions::Vector{Coefficient}, ordered_indexers::Vector{Indexer}, prob::FinchProblem, time_stepper::Stepper, buffers::ParallelBuffers, timer_output::TimerOutput, nl_var = nothing)
58.	Generated function: generated_solve_function_for_u(var::Vector{Variable{FT}}, mesh::Grid, refel::Refel, geometric_factors::GeometricFactors, fv_info::FVInfo, config::FinchConfig, coefficients::Vector{Coefficient}, variables::Vector{Variable{FT}}, test_functions::Vector{Coefficient}, ordered_indexers::Vector{Indexer}, prob::FinchProblem, time_stepper::Stepper, buffers::ParallelBuffers, timer_output::TimerOutput, nl_var = nothing)
59.	Imported code from profile/ad2d/fvad2dgpucode-fix-newkernel.jl
60.	Built initial conditions for: u
61.	Indexed variables detected, but no assembly loops specified. Using default.
62.	Solved for [u]
63.	Writing values to file: fvad2dgpu-vals.vtu
64.	Closed generated code files.
65.	────────────────────────────────────────────────────────────────────────────────
                                       Time                    Allocations      
                              ───────────────────────   ────────────────────────
      Tot / % measured:            96.3s /  75.8%           11.2GiB /  68.5%    

Section               ncalls     time    %tot     avg     alloc    %tot      avg
────────────────────────────────────────────────────────────────────────────────
Mesh                       1    40.1s   55.0%   40.1s   6.32GiB   82.6%  6.32GiB
  mesh2grid                1    24.2s   33.2%   24.2s   5.51GiB   72.0%  5.51GiB
  geo factors              1    3.08s    4.2%   3.08s    546MiB    7.0%   546MiB
    fv_info                1    1.43s    2.0%   1.43s    164MiB    2.1%   164MiB
  bids                     1    985ms    1.4%   985ms   72.5MiB    0.9%  72.5MiB
  gen/read                 1    535ms    0.7%   535ms   56.9MiB    0.7%  56.9MiB
CodeGen                    1    19.0s   26.1%   19.0s    510MiB    6.5%   510MiB
Solve                      1    13.8s   18.9%   13.8s    849MiB   10.8%   849MiB
  FV_solve                 1    13.3s   18.2%   13.3s    768MiB    9.8%   768MiB
    GPU alloc              1    6.49s    8.9%   6.49s    399MiB    5.1%   399MiB
    time_steps             1    2.79s    3.8%   2.79s    152MiB    1.9%   152MiB
      step_assembly      100    2.62s    3.6%  26.2ms    147MiB    1.9%  1.47MiB
        bdry_vals        100    647ms    0.9%  6.47ms   25.7MiB    0.3%   263KiB
      update_sol         100    160ms    0.2%  1.60ms   4.46MiB    0.1%  45.7KiB
    allocate               1    368μs    0.0%   368μs   3.61MiB    0.0%  3.61MiB
────────────────────────────────────────────────────────────────────────────────

66.	Completed. Closing Log.
